1. Установка node js глобально
2.Установите клиент Expo на вашем iOS или Android устройстве. Он будет использоваться для предварительного просмотра приложения в процессе разработки.
3.Установите инструменты командной строки. Это позволит вам создавать новый проект Expo, инициировать процесс сборки проекта и многое другое.
 Выполните следующую команду для установки: npm install exp --global

Создание проекта
4.npm i -g expo-cli
5.expo init test
6.cd test
7.npm start

Установка Atom для разработки react-native
1.https://atom.io/ скачиваем
Список моих плагинов: 
nuclide 
linter
linter-eslint 
linter-csslint
linter-php
language-php
atom-react-native-style 
atom-ternjs 
color-picker 
es6-javascript 
esformatter 
file-icons-последний !
highlight-selected 
react-native-snippets 
react-native-snippets-horse 
react-redux-react-native-snippets 
react-snippets
toggle-quotes
atom-autocomplete-php
php-debug

Сначала ставим плагин в папке проекта: yarn add -D eslint-config-equimper или npm i -D eslint-config-equimper eslint

Для плагина jslinter создаем файл в корне проекта:
.eslintrc 

Жизненный цикл компонента react:

1.constructor(props): конструктор, в котором происходит начальная инициализация компонента
2.componentWillMount(): вызывается непосредственно перед рендерингом компонента
3.render(): рендеринг компонента
4.componentDidMount(): вызывается после рендеринга компонента. Здесь можно выполнять запросы к удаленным ресурсам
5.componentWillUnmount(): вызывается перед удалением компонента из DOM
6.shouldComponentUpdate(nextProps, nextState): вызывается каждый раз при обновлении объекта props или state. В качестве параметра передаются новый объект props и state. Эта функция должна возвращать true (надо делать обновление) или false (игнорировать обновление). По умолчанию возвращается true. Но если функция будет возвращать false, то тем самым мы отключим обновление компонента, а последующие функции не будут срабатывать.
7.componentWillUpdate(nextProps, nextState): вызывается перед обновлением компонента (если shouldComponentUpdate возвращает true)
8.render(): рендеринг компонента (если shouldComponentUpdate возвращает true)
9.componentDidUpdate(prevProps, prevState): вызывается сразу после обновления компонента (если shouldComponentUpdate возвращает true). В качестве параметров передаются старые значения объектов props и state.
10.componentWillReceiveProps(nextProps), которая вызывается при обновлении объекта props. Новые значения этого объекта передаются в функции в качестве параметра. Как правило, в этой функции устанавливаются те свойства компонента, в том числе из this.state, которые зависят от значений из props.
